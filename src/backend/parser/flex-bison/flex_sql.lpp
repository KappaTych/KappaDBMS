
Digit        [0-9]
Letter       [a-zA-Z_]
HexDigit     [a-fA-F0-9]
Exp          [Ee][+-]?{Digit}+
UNSIGN_INT 	 {Digit}+

%{
    #include "bison_sql.h"
    #include <stdio.h>

%}

%option header-file="flex_sql.h"
%option outfile="flex_sql.cpp"

%option reentrant
%option bison-bridge

%option noyywrap
%option case-insensitive
%option bison-locations


%s COMMENT

%%
--              BEGIN(COMMENT);
<COMMENT>[^\n]* ;
<COMMENT>\n     BEGIN(INITIAL);

[ \t\n]+    ;

CREATE      return CREATE;
DROP        return DROP;
SHOW		return SHOW;
TABLE       return TABLE;
NUL 		return NUL;
SELECT 		return SELECT;
VALUES 		return VALUES;
INTO 		return INTO;
INSERT 		return INSERT;
FROM		return FROM;

INTEGER     return INTEGER;
DOUBLE      return DOUBLE;
TEXT        return TEXT;

[(),;]    { return yytext[0]; }


UNSIGN_INT   {
    yylval->ival = atol(yytext);
    return INT_CONST;
}

({UNSIGN_INT}\.{UNSIGN_INT}?|{UNSIGN_INT}?\.{UNSIGN_INT}){Exp}? 	{
	yylval->fval = std::stoll(yytext);
	return DOUBLE_CONST;
}

{Letter}({Letter}|{Digit})* {
    yylval->strval = new std::string(yytext);
    return IDENTIFIER;
}

\'([^'\n]|\'\')+\' {
	yylval->strval = new std::string(yytext + 1, yyleng - 1);
	return STRING;
}


. { 
	fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); 
	return 0; 
}

%%


int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}