%{
    #include "bison_sql.h"
    #include "flex_sql.h"

    #include <stdio.h>
    #include <string>


    int yyerror(YYLTYPE* llocp, yyscan_t scanner, const char *msg) {
        return 1;
    }
%}

// Specify code that is included in the generated .h and .c files
%code requires {

#include "../sql-stmt/Table.h"
#include "../dbStub.h"


#ifndef YYtypeDEF_YY_SCANNER_T
#define YYtypeDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

}

%output  "bison_sql.cpp"
%defines "bison_sql.h"

// Tell bison to create a reentrant parser
%define api.pure full

%locations

// For Pure Calling
%lex-param   { yyscan_t scanner }
%parse-param { yyscan_t scanner }


// Define all data-types
%union {
    int64_t ival;
    std::string* sval;
    
    sql::TableName* table_name;
    sql::ColumnDefinition* column;
    sql::DataType column_type_t;   
    std::vector<sql::ColumnDefinition>* column_vec;
}

//  Destructor
%destructor { } <ival> <column_type_t>
%destructor{ delete(($$)); } <table_name> <column> <column_vec>  <sval>


// Token definition

%token<sval> IDENTIFIER
%token<ival> INT

%token DOUBLE TEXT INTEGER
%token CREATE TABLE DROP SHOW

// Non-terminal types

// %type       sql_stmt_list
// %type       statement
// %type       create_statement
// %type       drop_statement
// %type       show_statement

%type<table_name>      table_name
%type<column_type_t>   column_type
%type<column>        column_def
%type<column_vec>  column_def_commalist


// Token Precedence and Associativity

%left '(' ')'


%%

input:
        sql_stmt_list opt_semicolon
    ;

sql_stmt_list:
        statement 
    |   sql_stmt_list ';' statement
    ;

statement:
       create_statement
    |   drop_statement
    | 	show_statement
    ;


// Show Statement
show_statement:
        SHOW TABLE table_name {
            show_table(*$3);
        }
    ;

// Create Statement
create_statement:
	CREATE TABLE table_name '(' column_def_commalist ')' {
            create_table(*$3, *$5);
        }
    ;

column_def_commalist:
        column_def { 
            $$ = new std::vector<sql::ColumnDefinition>();
            $$->push_back(*$1);
        }
    |   column_def_commalist ',' column_def { 
            $1->push_back(*$3);
            $$ = $1; 
        }
    ;

column_def:
        IDENTIFIER column_type {
            $$ = new sql::ColumnDefinition(*($1), $2);
        }
    ;
column_type:
        INTEGER { $<column_type_t>$ = sql::DataType::INT; }
    |   DOUBLE { $$ = sql::DataType::DOUBLE; }
    |   TEXT { $$ = sql::DataType::TEXT; }
    ;

// Drop Statement
drop_statement:
        DROP TABLE table_name {
            drop_table(*$3);
        }
    ;

// Table

table_name:
		IDENTIFIER                {
		$$ = new sql::TableName("", *($1));
		}
	|	IDENTIFIER '.' IDENTIFIER {
	        $$ = new sql::TableName(*($1), *($3));
	    }
	;

// Misc

opt_semicolon:
	';'
|	/* empty */
;