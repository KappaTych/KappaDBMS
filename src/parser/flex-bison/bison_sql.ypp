%code top {
    #include "bison_sql.hpp"
    #include "flex_sql.hpp"
    #include "../parser.hpp"

    #include <string>

    static yy::BisonParser::symbol_type yylex(yy::FlexScanner& scanner) {
        return scanner.get_next_token();
    }

    void yy::BisonParser::error(yy::location const&, const std::string&) {}
}

%code requires {
    #define YYDEBUG 1
    
    #include <memory>
    #include <utility>
    #include "../sql.hpp"

    namespace yy {
        class FlexScanner;
    }

    namespace sql {
        class Parser;
    }
}

%require "3.0.2"
%language "c++"
%define parser_class_name { BisonParser }

%define api.token.constructor
%define api.value.type variant

%locations

%lex-param   { yy::FlexScanner& scanner }
%parse-param { yy::FlexScanner& scanner }
%parse-param { sql::Parser& driver }

// Token definition
%token<std::string> IDENTIFIER STRING 
%token<std::string> INTEGER_CONST DOUBLE_CONST
%token<std::string> TRUE FALSE

%token<std::string> DOUBLE TEXT INTEGER
%token<std::string> CREATE TABLE DROP SHOW NULL_ SELECT VALUES INTO INSERT FROM
%token<std::string> UPDATE SET WHERE LIMIT OFFSET DELETE
%token<std::string> CAST AS ESCAPE ISNULL NOTNULL BETWEEN DISTINCT EXISTS WHEN
%token<std::string> THEN ELSE NOT COLLATE IS IN LIKE GLOB MATCH REGEXP AND OR

%token<std::string> EQUAL NOTEQUAL LESSEQUAL GREATERQUALL LESS GREATER
%token<std::string> CONCATENATION LEFTSHIFT RIGHTSHIFT BINNOT BINAND BINOR
%token<std::string> PLUS MINUS MULTIPLY DIVISION MOD
%token<std::string> SEMICOLON DOT COMMA OPENBRACKET CLOSEBRACKET
%token UMINUS UPLUS
%token END_FILE 0

// Token Precedence and Associativity
// lowest to highest
%left OR
%left AND
%nonassoc IN IS ISNULL NOTNULL LIKE GLOB MATCH REGEXP
%left NOT
%left BETWEEN
%nonassoc EQUAL NOTEQUAL
%nonassoc LESS GREATER LESSEQUAL GREATERQUALL

%left BINOR
%left BINAND
%left LEFTSHIFT RIGHTSHIFT

%left PLUS MINUS
%left MULTIPLY DIVISION MOD
%left CONCATENATION

%right UMINUS UPLUS
%right BINNOT
%right COLLATE

%left OPENBRACKET CLOSEBRACKET
%left DOT



%%
%start input;

input:
        sql_stmt_list opt_semicolon
    ;

sql_stmt_list:
        statement 
        {
            driver.AddInstruction($1);
        }
    |   sql_stmt_list SEMICOLON statement
        {
            driver.AddInstruction($3);
        }
    ;

%type <std::shared_ptr<cmd::Instruction>> statement;
statement:
        drop_statement { $$ = $1; }
    |   show_statement { $$ = $1; }
    |   create_statement { $$ = $1; }
    |   select_statement { $$ = $1; }
    |   insert_statement { $$ = $1; }
    |   update_statement { $$ = $1; }
    |   delete_statement { $$ = $1; }
    ;


// Show Statement
%type <std::shared_ptr<cmd::Instruction>> show_statement;
show_statement:
        SHOW TABLE table_name
        { 
            $$ = std::make_shared<cmd::ShowCreateTable>($3);
            $$->SetRaw($1 + " " + $2 + " " + $3.GetRaw());
        }
    ;

// Create Statement
%type <std::shared_ptr<cmd::Instruction>> create_statement;
create_statement:
        CREATE TABLE table_name OPENBRACKET column_def_commalist CLOSEBRACKET
        {
            std::string raw = $1 + " " + $2 + " " + $3.GetRaw() + " " + $4;
            for (auto& e : $5) {
                raw += e.GetRaw() + ", ";
            }
            raw.pop_back();
            raw.pop_back();
            $$ = std::make_shared<cmd::CreateTable>($3, $5);
            raw += $6;
            $$->SetRaw(raw);
        }
    ;

%type <std::list<cmd::ColumnDefinition>> column_def_commalist;
column_def_commalist:
        column_def 
        {
            $$ = std::list<cmd::ColumnDefinition>({std::move($1)});
        }
    |   column_def_commalist COMMA column_def 
        {
            $1.push_back($3);
            $$ = std::move($1);
        }
    ;

%type <cmd::ColumnDefinition> column_def;
column_def:
        IDENTIFIER column_type 
        {
            $$ = cmd::ColumnDefinition($1, $2.first);
            $$.SetRaw($1 + " " + $2.second);
        }
    ;

%type <cmd::column_type> column_type;
column_type:
        INTEGER { $$ = std::make_pair(cmd::LiteralType::INTEGER, $1); }
    |   DOUBLE { $$ = std::make_pair(cmd::LiteralType::DOUBLE, $1); }
    |   TEXT { $$ = std::make_pair(cmd::LiteralType::TEXT, $1); }
    ;

// Drop Statement
%type <std::shared_ptr<cmd::DropTable>> drop_statement;
drop_statement:
        DROP TABLE table_name
        {
            $$ = std::make_shared<cmd::DropTable>($3);
            $$->SetRaw($1 + " " + $2 + " " + $3.GetRaw());
        }
    ;

// Select Statement
%type <std::shared_ptr<cmd::Select>> select_statement;
select_statement:
        SELECT select_list FROM table_name optional_where 
        {
            std::string raw = $1 + " ";
            if ($2 == nullptr) {
                raw += "*";
            } else {
                for (auto& e : *($2)) {
                    raw += e->GetRaw() + ", ";
                }
                raw.pop_back();
                raw.pop_back();
            }
            raw += " " + $3 + " " + $4.GetRaw() + " ";
            if ($2 == nullptr) {
                $$ = std::make_shared<cmd::Select>($4, $5);
            } else {
                $$ = std::make_shared<cmd::Select>($4, *($2), $5);
            }
            if ($5 != nullptr) { raw += " where " + $5->GetRaw(); }
            $$->SetRaw(raw);
        }
    ;

%type <std::shared_ptr<std::list<std::shared_ptr<cmd::Expression>>>> select_list;
select_list:
        MULTIPLY { $$ = nullptr; }
    |   expr_list { $$ = $1; }
    ;    
    

%type <std::shared_ptr<cmd::Expression>> optional_where;
optional_where:
        WHERE expr { $$ = $2; }
    |   %empty  { $$ = nullptr; }
    ;   


// Insert Statement
%type <std::shared_ptr<cmd::Insert>> insert_statement;
insert_statement:
        INSERT INTO table_name optional_column_list VALUES OPENBRACKET literal_list CLOSEBRACKET 
        {
            std::string raw = $1 + " " + $2 + " " + $3.GetRaw();

            if ($4 == nullptr) {
                $$ = std::make_shared<cmd::Insert>($3, *($7));
            } else {
                $$ = std::make_shared<cmd::Insert>($3, *($7), *($4));
                raw += " ";
                for (auto& e : *($4)) {
                    raw += e.GetRaw() + ", ";
                }
                raw.pop_back();
                raw.pop_back();
            }
            raw += " " + $5 + " " + $6;
            for (auto& e : *($7)) {
                raw += e.GetRaw() + ", ";
            }
            raw.pop_back();
            raw.pop_back();
            raw +=  $8;
            $$->SetRaw(raw);
        }
    ;


%type <std::shared_ptr<std::list<cmd::Column>>> optional_column_list;
optional_column_list:
        id_comma_list
    |   %empty { $$ = nullptr; }
    ;
    
// Update statement
%type <std::shared_ptr<cmd::Update>> update_statement;
update_statement:
        UPDATE table_name SET update_list optional_where {
            $$ = std::make_shared<cmd::Update>($2, $4, $5);
            
            std::string raw = $1 + " " + $2.GetRaw() + " " + $3 + " ";
            for (auto& e : $4) {
                raw += e.raw + ", ";
            }
            raw.pop_back();
            raw.pop_back();
            if ($5 != nullptr) {
                raw += " where " +  $5->GetRaw();
            }
            $$->SetRaw(raw);
        }
    ;
    
%type <std::list<cmd::UpdateClause>> update_list;
update_list:
        update_clause 
        {
            $$.push_back($1);
        }
    |   update_list COMMA update_clause 
        {
            $1.push_back($3);
            $$ = std::move($1);
        }
    ;     

%type <cmd::UpdateClause> update_clause;
update_clause:
        IDENTIFIER EQUAL expr 
        {
            $$ = cmd::UpdateClause(cmd::Column($1), $3, $1 + $2 + $3->GetRaw());
        }
    ;

// Delete statement
%type <std::shared_ptr<cmd::Delete>> delete_statement;
delete_statement:
        DELETE FROM table_name optional_where
        {
            $$ = std::make_shared<cmd::Delete>($3, $4);
            $$->SetRaw($1 + " " + $2 + " " + $3.GetRaw() + ($4 == nullptr ? "" : " where " + $4->GetRaw()));
        }
    ;    
 
// Expression
%type <std::shared_ptr<std::list<std::shared_ptr<cmd::Expression>>>> expr_list;
expr_list:
        expr 
        {  
            $$ = std::make_shared<std::list<std::shared_ptr<cmd::Expression>>>();
            $$->push_back($1);
        }
    |   expr_list COMMA expr 
        {
            $1->push_back($3);
            $$ = $1;
        }
    ;

%type <std::shared_ptr<cmd::Expression>> expr;
expr:   
        operand { $$ = $1; }
    |   logical_operator { $$ = $1; }
    ;

%type <std::shared_ptr<cmd::Expression>> operand;
operand:
        OPENBRACKET expr CLOSEBRACKET { 
            $$ = $2;
            $$->SetRaw($1 + $2->GetRaw() + $3);
        }
    |   binary_operator { $$ = $1; }
    |   scalar_expr { $$ = $1; }
    |   unary_operator { $$ = $1; }
    ;

%type <std::shared_ptr<cmd::Expression>> unary_operator;
unary_operator:
        MINUS operand %prec UMINUS 
        { 
            $$ = std::make_shared<cmd::UnaryOperation>(cmd::OperationType::UNARY_MINUS, $2); 
            $$->SetRaw($1 + $2->GetRaw());
        }
    |   PLUS operand %prec UPLUS 
        { 
            $$ = std::make_shared<cmd::UnaryOperation>(cmd::OperationType::UNARY_PLUS, $2); 
            $$->SetRaw($1 + $2->GetRaw());
        }
    |   BINNOT  operand 
        { 
            $$ = std::make_shared<cmd::UnaryOperation>(cmd::OperationType::BIN_NOT, $2); 
            $$->SetRaw($1 + " " + $2->GetRaw());
        }
    |   NOT operand 
        { 
            $$ = std::make_shared<cmd::UnaryOperation>(cmd::OperationType::NOT, $2); 
            $$->SetRaw($1 + " " + $2->GetRaw());
        }
    |   operand ISNULL 
        { 
            $$ = std::make_shared<cmd::UnaryOperation>(cmd::OperationType::ISNULL, $1); 
            $$->SetRaw($1->GetRaw() + " " + $2);
        }
    |   operand NOTNULL 
        {
            auto nodeIsNull = std::make_shared<cmd::UnaryOperation>(cmd::OperationType::ISNULL, $1);
            $$ = std::make_shared<cmd::UnaryOperation>(cmd::OperationType::NOT, nodeIsNull);
            $$->SetRaw($1->GetRaw() + " " + $2);
        }
    ;

%type <std::shared_ptr<cmd::Expression>> binary_operator;
binary_operator:
        operand LESS operand 
        { 
            $$ = std::make_shared<cmd::BinaryOperation>(cmd::OperationType::LESS, $1, $3); 
            $$->SetRaw($1->GetRaw() + " " + $2 + " " + $3->GetRaw());
        }
    |   operand GREATER operand 
        { 
            $$ = std::make_shared<cmd::BinaryOperation>(cmd::OperationType::GREATER, $1, $3); 
            $$->SetRaw($1->GetRaw() + " " + $2 + " " + $3->GetRaw());
        }
    |   operand EQUAL operand 
        { 
            $$ = std::make_shared<cmd::BinaryOperation>(cmd::OperationType::EQUAL, $1, $3); 
            $$->SetRaw($1->GetRaw() + " " + $2 + " " + $3->GetRaw());

        }
    |   operand NOTEQUAL operand 
        { 
            $$ = std::make_shared<cmd::BinaryOperation>(cmd::OperationType::NOT_EQUAL, $1, $3);
            $$->SetRaw($1->GetRaw() + " " + $2 + " " + $3->GetRaw());
        }
    |   operand LESSEQUAL operand 
        { 
            $$ = std::make_shared<cmd::BinaryOperation>(cmd::OperationType::LESS_EQUAL, $1, $3);
            $$->SetRaw($1->GetRaw() + " " + $2 + " " + $3->GetRaw());
        }
    |   operand GREATERQUALL operand 
        { 
            $$ = std::make_shared<cmd::BinaryOperation>(cmd::OperationType::GREATER_EQUAL, $1, $3);
            $$->SetRaw($1->GetRaw() + " " + $2 + " " + $3->GetRaw());
        }
    |   operand PLUS operand 
        { 
            $$ = std::make_shared<cmd::BinaryOperation>(cmd::OperationType::PLUS, $1, $3);
            $$->SetRaw($1->GetRaw() + " " + $2 + " " + $3->GetRaw());
        }
    |   operand MINUS operand 
        { 
            $$ = std::make_shared<cmd::BinaryOperation>(cmd::OperationType::MINUS, $1, $3); 
            $$->SetRaw($1->GetRaw() + " " + $2 + " " + $3->GetRaw());
        }
    |   operand MULTIPLY operand 
        { 
            $$ = std::make_shared<cmd::BinaryOperation>(cmd::OperationType::MULTIPLY, $1, $3);
            $$->SetRaw($1->GetRaw() + " " + $2 + " " + $3->GetRaw());
        }
    |   operand DIVISION operand 
        { 
            $$ = std::make_shared<cmd::BinaryOperation>(cmd::OperationType::DIVISION, $1, $3);
            $$->SetRaw($1->GetRaw() + " " + $2 + " " + $3->GetRaw());
        }
    |   operand MOD operand 
        { 
            $$ = std::make_shared<cmd::BinaryOperation>(cmd::OperationType::MOD, $1, $3);
            $$->SetRaw($1->GetRaw() + " " + $2 + " " + $3->GetRaw());
        }
    |   operand CONCATENATION operand 
        { 
            $$ = std::make_shared<cmd::BinaryOperation>(cmd::OperationType::CONCATENATION, $1, $3);
            $$->SetRaw($1->GetRaw() + " " + $2 + " " + $3->GetRaw());
        }
    ;

%type <std::shared_ptr<cmd::Expression>> logical_operator;
logical_operator:
        expr AND expr 
        { 
            $$ = std::make_shared<cmd::BinaryOperation>(cmd::OperationType::AND, $1, $3);
            $$->SetRaw($1->GetRaw() + " " + $2 + " " + $3->GetRaw());
        }
    |   expr OR expr 
        { 
            $$ = std::make_shared<cmd::BinaryOperation>(cmd::OperationType::OR, $1, $3);
            $$->SetRaw($1->GetRaw() + " " + $2 + " " + $3->GetRaw());
        }
    ;

%type <std::shared_ptr<cmd::Expression>> scalar_expr;
scalar_expr:
        literal_value { $$ = $1; }
    |   column_name { $$ = $1; }
    ;

%type <std::shared_ptr<cmd::Literal>> literal_value;
literal_value:
        INTEGER_CONST 
        { 
            $$ = std::make_shared<cmd::Literal>(std::stoll($1));
            $$->SetRaw($1);

        }
    |   DOUBLE_CONST 
        { 
            $$ = std::make_shared<cmd::Literal>(std::stold($1));
            $$->SetRaw($1);
        }
    |   STRING 
        { 
            $$ = std::make_shared<cmd::Literal>($1);
            $$->SetRaw("'" + $1 + "'");
        }
    |   NULL_ 
        { 
            $$ = std::make_shared<cmd::Literal>();
            $$->SetRaw($1);
        }
    |   TRUE 
        { 
            $$ = std::make_shared<cmd::Literal>(true);
            $$->SetRaw($1);
        }
    |   FALSE 
        { 
            $$ = std::make_shared<cmd::Literal>(false);
            $$->SetRaw($1);
        }
    ;

%type <std::shared_ptr<cmd::Column>> column_name;
column_name:
        IDENTIFIER  
        {        
            $$ = std::make_shared<cmd::Column>($1);
            $$->SetRaw($1);
        } 
    |   IDENTIFIER DOT IDENTIFIER   
        { 
            $$ = std::make_shared<cmd::Column>($3, $1);
            $$->SetRaw($1 + $2 + $3); 
        }
    |   IDENTIFIER DOT IDENTIFIER DOT IDENTIFIER 
        { 
            $$ = std::make_shared<cmd::Column>($5, $3, $1);
            $$->SetRaw($1 + $2 + $3 + $4 + $5);
        }
    ;

// Table
%type <cmd::TableDefinition> table_name;
table_name:
        IDENTIFIER                
        {
            $$ = cmd::TableDefinition($1);
            $$.SetRaw($1);
        }
    |   IDENTIFIER DOT IDENTIFIER 
        {
            $$ = cmd::TableDefinition($3, $1);
            $$.SetRaw($1 + $2 + $3);
        }
    ;

// Misc

opt_semicolon:
        SEMICOLON
    |   END_FILE
    ;

%type <std::shared_ptr<std::list<cmd::Literal>>> literal_list;
literal_list:
        literal_value
        {
            $$ = std::make_shared<std::list<cmd::Literal>>();
            $$->push_back(*($1));
        } 
    |   literal_list COMMA literal_value 
        {
            $1->push_back(*($3));
            $$ = $1;
        }    
    ;

%type <std::shared_ptr<std::list<cmd::Column>>> id_comma_list;
id_comma_list:
        IDENTIFIER  
        {   
            $$ = std::make_shared<std::list<cmd::Column>>();
            $$->push_back(cmd::Column($1)); 
            $$->back().SetRaw($1);
        }
    |   id_comma_list COMMA IDENTIFIER
        {         
            $1->push_back(cmd::Column($3));
            $1->back().SetRaw($3);
            $$ = $1;
        }
    ;
