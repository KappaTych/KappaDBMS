#line 1 "flex_sql.cpp"

#line 3 "flex_sql.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* begin standard C++ headers. */
/* %if-c++-only */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::streambuf* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */
/* %ok-for-header */

/* %endif */
/* %endif */

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int FlexScanner::yylex()

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 78
#define YY_END_OF_BUFFER 79
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[435] =
    {   0,
        0,    0,    2,    2,   79,   77,    4,    5,   77,   77,
       66,   58,   77,   70,   71,   64,   62,   69,   63,   68,
       65,   72,   67,   53,   55,   54,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   59,   57,    2,    2,    3,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    4,
        5,   49,    0,    0,   76,    1,   73,   73,   72,   60,

       51,   50,   48,   52,   61,   75,   75,   22,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   36,   35,   75,   75,   75,   75,   75,   42,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       56,    2,    2,    2,    2,    2,    2,    1,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,   74,    0,   73,   41,   75,   75,   75,

       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   33,   75,   75,
       75,   75,   13,   75,   75,   75,   75,   75,   75,   75,
       75,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    0,
       73,   75,   21,   75,   75,   75,   75,   75,    7,   31,
       75,   75,   75,   20,   38,   75,   75,   18,   75,   37,
       75,   75,   75,   10,   75,   75,   75,    8,   75,   44,

       30,   46,   75,   75,   29,   75,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,   75,   75,   75,   75,   75,   75,   75,
       75,   47,   75,   75,   75,   15,   39,   75,   75,   75,
       75,    9,   75,   75,   14,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,   75,   75,    6,
       32,   75,   43,   23,   28,   19,   75,   24,   75,   16,

       40,   11,   12,   17,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,   26,   34,   75,   45,   25,    2,    2,    2,    2,
        2,   27,    2,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    7,    8,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,    1,   18,   19,
       20,   21,    1,    1,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       31,   38,   39,   40,   41,   42,   43,   44,   31,   31,
        1,    1,    1,    1,   31,    1,   45,   46,   47,   48,

       49,   50,   51,   52,   53,   31,   54,   55,   56,   57,
       58,   59,   31,   60,   61,   62,   63,   64,   65,   66,
       31,   31,    1,   67,    1,   68,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[69] =
    {   0,
        1,    1,    2,    1,    3,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    4,    1,    1,    1,
        1,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    1,    1
    } ;

static const flex_int16_t yy_base[442] =
    {   0,
        0,    0,   68,    0,  575, 1175,  549,  544,  507,    0,
     1175, 1175,  513, 1175, 1175, 1175, 1175, 1175,  502,  494,
     1175,  122, 1175,  121,  464,  123,  110,  112,  124,  121,
      133,  130,  121,    0,  148,  120,  133,  122,  162,  165,
      166,  175,  127,  171,  167,  411, 1175,    0,  468,  463,
      406,  384,    0,    0,  339,    0,    0,    0,    0,    0,
      332,  322,    0,  191,    0,  209,  314,  182,  235,  303,
      235,  300,  233,  238,  236,  172,  302,  237,  305,  299,
      306,  184,  316,  347,  335,  352,  338,  239,    0,  287,
      265, 1175,  260,  244,  230, 1175,  360,  362,  208, 1175,

     1175, 1175, 1175, 1175, 1175,    0,  186,    0,  235,  239,
      246,  232,  347,  342,  341,  347,  352,  296,  345,  360,
      359,  364,  379,  371,  376,  372,  374,  383,  393,    0,
      393,  391,  387,  402,  383,  403,  392,  410,  404,  413,
     1175,    0,  230,    0,  226,  218,  209,    0,  425,  430,
      446,    0,    0,    0,    0,    0,    0,  424,  439,  428,
      431,  442,  434,  443,  449,  446,  460,  464,  471,  470,
      476,  479,  482,  488,  504,  500,  507,  510,  522,  519,
      528,  450,  532,  547,  543,  544,  550,  489,  556,  563,
      565,  559,    0, 1175,  601,  578,    0,  499,  560,  570,

      584,  581,  570,  594,  584,  597,  602,  587,  589,  597,
      610,  608,  609,  596,  612,  609,  617,  609,  616,  612,
      616,  626,    0,  611,  622,  620,  628,  642,  647,  631,
      643,    0,  672,  653,  648,  661,  667,  657,  673,  662,
      675,  682,  683,  670,  691,  695,  699,  701,  720,  704,
      713,  726,  715,  721,  735,  719,  732,  746,  729,  737,
      747,  751,  757,  753,  762,  754,  779,  772,  782,  190,
      148,  765,    0,  777,  764,  770,  788,  790,    0,    0,
      788,  787,  803,    0,    0,  795,  802,    0,  801,    0,
      796,  808,  799,    0,  812,  799,  820,    0,  820,    0,

        0,    0,  808,  824,    0,  825,  139,  136,  828,  831,
      837,  838,  845,  842,  850,  840,  849,  853,  866,  855,
      862,  867,  870,  875,  871,  884,  883,  887,  892,  888,
      896,  897,  899,  914,  905,  908,  909,  921,  924,  926,
      927,  929,  930,  933,  902,  934,  936,  932,  942,  943,
      932,    0,  932,  948,  944,    0,    0,  947,  941,  947,
      946,    0,  961,  951,    0,  969,  974,  970,  972,  978,
      975,  979,  981,  983,  985,  989,  996,  990,  991, 1000,
     1017, 1011, 1018, 1005, 1015, 1020, 1024, 1017, 1027,    0,
        0, 1037,    0,    0,    0,    0, 1018,    0, 1030,    0,

        0,    0,    0,    0, 1042, 1039, 1045, 1046, 1063, 1049,
     1056, 1057, 1060, 1064, 1066, 1067, 1070, 1071, 1077, 1078,
     1081,    0,    0, 1061,    0,    0, 1082, 1085, 1088, 1091,
     1092,    0, 1095, 1175, 1150, 1154,  144, 1158, 1162, 1166,
     1170
    } ;

static const flex_int16_t yy_def[442] =
    {   0,
      434,    1,  434,    3,  434,  434,  434,  434,  434,  435,
      434,  434,  436,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  434,  434,  438,  438,  434,
      438,  439,  438,  438,  440,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  441,  441,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,  438,  438,  434,
      434,  434,  435,  436,  434,  434,  434,  434,  434,  434,

      434,  434,  434,  434,  434,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      434,  438,  438,  438,  439,  440,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,  438,  434,  434,  434,  437,  437,  437,  437,

      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  438,  438,  438,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,  434,
      434,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,

      437,  437,  437,  437,  437,  437,  438,  438,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,

      437,  437,  437,  437,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,  437,  437,  437,  437,  437,   70,   70,   70,   70,
       70,  437,   70,    0,  434,  434,  434,  434,  434,  434,
      434
    } ;

static const flex_int16_t yy_nxt[1244] =
    {   0,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
       34,   34,   36,   37,   38,   39,   34,   40,   41,   42,
       43,   44,   45,   34,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   34,   36,   37,   38,   39,   34,   40,
       41,   42,   43,   44,   45,   34,   46,   47,   48,   49,
       50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
       60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
       70,   71,   72,   73,   74,   75,   76,   77,   76,   76,

       78,   79,   80,   81,   76,   82,   83,   84,   85,   86,
       87,   76,   69,   70,   71,   72,   73,   74,   75,   76,
       77,   76,   78,   79,   80,   81,   76,   82,   83,   84,
       85,   86,   87,   76,   88,   89,   98,  109,   99,  100,
      101,  102,  104,  105,  107,  110,  113,  106,  108,  125,
      114,  120,  308,  122,  126,  308,  115,  127,  116,  111,
      109,  112,  128,  138,  271,  117,  107,  121,  110,  113,
      108,  118,  125,  114,  120,  122,  119,  126,  115,  127,
      116,  111,  123,  112,  128,  138,  124,  117,  129,  121,
      131,  132,  139,  118,  133,  140,  134,  158,  119,  130,

      135,  156,  157,  136,  123,  150,  271,  151,  124,  183,
      197,  129,  137,  131,  132,  139,  146,  133,  140,  134,
      158,  130,   98,  135,   99,  147,  136,  152,  153,  154,
      232,  143,  183,  197,  137,  142,  142,   94,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,   95,  142,  142,  142,  142,  162,  201,  158,  172,
      158,  158,  158,  158,  194,  169,  177,   91,  174,  159,
      163,  170,  164,  160,  198,  173,  171,  199,  200,  162,
      201,  158,  172,  158,  158,  158,  158,  169,   90,  177,
      174,  159,  163,  170,  164,  160,  198,  173,  171,  199,

      200,  142,  142,  142,  142,  193,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,  142,  207,
      142,  142,  142,  142,  158,  165,  178,  158,  161,  166,
      158,  158,  181,  155,  179,  167,  175,  168,  149,  180,
      176,  184,  207,  182,  185,  148,  147,  158,  165,  178,
      158,  161,  166,  158,  158,  181,  179,  167,  175,  168,
      158,  180,  176,  158,  184,  182,  192,  185,  186,  142,
      142,  190,  187,  191,  208,  188,   97,  158,  196,  202,
      203,  204,  205,  158,  189,  195,  158,  195,  142,  192,
      206,  186,  209,  190,  210,  187,  191,  208,  188,  211,

      158,  202,  203,  204,  205,  214,  189,  215,  195,  216,
      195,  217,  206,  218,  209,  219,  210,  212,  213,  220,
      221,  211,  224,  222,  225,  144,  226,  214,  227,  215,
      223,  216,  228,  217,  229,  218,  230,  219,  231,  212,
      213,  149,  220,  221,  224,  222,  234,  225,  226,  158,
      233,  227,  223,  158,  228,  233,  158,  229,  230,  158,
      150,  231,  151,  235,  158,   91,  238,  158,  239,  143,
      236,  158,  158,  233,  158,  158,  158,  141,  233,  158,
      237,  240,  158,  103,  241,  158,  235,  158,  238,  158,
      158,  239,  236,  245,  158,  158,  158,  158,  158,  243,

      242,  158,  237,  240,  158,  246,  241,  158,  158,  244,
       97,  247,  158,  158,  265,   96,  245,  248,  158,  158,
       95,  243,  242,  249,  158,  158,   92,  158,  246,  158,
      158,  244,  158,  247,  252,  158,  158,  265,  253,  248,
      254,  272,  250,  251,  158,  249,   91,  158,  158,  255,
       90,  257,  158,  158,  258,  158,  252,  158,  158,  259,
      253,  256,  254,  272,  250,  251,  263,  158,  158,  158,
      158,  255,  158,  257,  434,  158,  158,  258,  262,  260,
      158,  158,  259,  256,  269,  434,  261,  267,  158,  263,
      158,  158,  158,  264,  196,  158,  266,  268,  158,  273,

      262,  260,  274,  195,  158,  275,  276,  269,  261,  277,
      267,  158,  270,  158,  270,  264,  278,  271,  266,  268,
      279,  273,  280,  281,  274,  282,  195,  283,  275,  276,
      284,  277,  285,  286,  287,  434,  289,  290,  291,  278,
      292,  296,  279,  293,  288,  280,  281,  282,  294,  283,
      295,  297,  284,  298,  299,  285,  286,  287,  289,  300,
      290,  291,  301,  292,  296,  293,  288,  302,  303,  234,
      294,  304,  295,  158,  297,  298,  299,  305,  233,  434,
      306,  300,  158,  307,  301,  307,  158,  313,  308,  311,
      302,  303,  158,  304,  312,  317,  158,  434,  158,  305,

      158,  233,  306,  309,  315,  158,  310,  158,  158,  158,
      313,  311,  318,  434,  314,  158,  158,  312,  317,  316,
      158,  158,  434,  158,  158,  309,  158,  315,  310,  323,
      158,  158,  434,  319,  321,  318,  314,  320,  324,  158,
      327,  316,  322,  158,  158,  158,  158,  158,  325,  158,
      328,  158,  323,  330,  333,  319,  321,  158,  329,  320,
      158,  324,  334,  327,  331,  322,  326,  158,  158,  158,
      325,  158,  158,  328,  158,  330,  158,  333,  158,  339,
      158,  329,  158,  158,  332,  334,  331,  158,  326,  336,
      344,  434,  337,  335,  158,  158,  338,  158,  345,  158,

      340,  158,  339,  346,  158,  158,  332,  158,  434,  347,
      158,  336,  341,  344,  337,  335,  342,  348,  338,  343,
      158,  345,  349,  340,  350,  346,  351,  158,  352,  354,
      158,  347,  353,  355,  341,  356,  357,  359,  342,  358,
      348,  343,  360,  361,  349,  362,  350,  363,  351,  364,
      365,  352,  354,  366,  353,  355,  158,  356,  367,  357,
      359,  358,  158,  158,  360,  158,  361,  158,  362,  363,
      158,  370,  364,  365,  158,  158,  366,  368,  158,  158,
      374,  367,  371,  434,  369,  158,  158,  158,  158,  372,
      158,  158,  158,  158,  370,  158,  158,  158,  158,  368,

      158,  158,  376,  374,  371,  373,  369,  375,  158,  158,
      158,  372,  158,  158,  158,  158,  377,  158,  158,  158,
      379,  158,  381,  158,  158,  376,  378,  373,  380,  375,
      158,  158,  158,  384,  158,  158,  158,  383,  377,  158,
      158,  389,  382,  379,  158,  381,  158,  158,  378,  158,
      380,  158,  386,  158,  158,  387,  384,  158,  388,  390,
      383,  391,  158,  389,  382,  385,  392,  393,  394,  158,
      395,  396,  158,  397,  158,  386,  398,  158,  387,  399,
      400,  388,  390,  401,  391,  402,  403,  385,  392,  404,
      393,  394,  395,  396,  405,  407,  397,  408,  398,  158,

      410,  399,  400,  158,  411,  401,  158,  402,  158,  403,
      158,  404,  409,  406,  414,  158,  158,  405,  407,  412,
      408,  158,  158,  410,  413,  158,  158,  411,  415,  158,
      158,  158,  416,  158,  409,  406,  158,  414,  158,  158,
      420,  412,  158,  158,  158,  158,  413,  418,  158,  158,
      415,  422,  423,  158,  416,  425,  417,  419,  421,  158,
      424,  434,  426,  420,  428,  158,  158,  158,  158,  418,
      158,  158,  158,  422,  158,  423,  427,  425,  417,  419,
      421,  158,  158,  424,  426,  158,  429,  428,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  427,  431,

      432,  430,  158,  158,  158,  158,  158,  158,  158,  429,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  431,  432,  430,  434,  158,  158,  433,  434,  158,
      158,  434,  434,  158,  434,  434,  158,  434,  434,  158,
      158,  434,  434,  158,  434,  434,  434,  434,  434,  433,
       93,  434,  434,   93,   94,  434,   94,   94,  142,  434,
      142,  142,  145,  434,  145,  145,  146,  434,  146,  146,
      158,  434,  158,  158,    5,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,

      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434
    } ;

static const flex_int16_t yy_chk[1244] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,   22,   28,   22,   24,
       24,   24,   26,   26,   27,   29,   30,  437,   27,   36,
       30,   32,  308,   33,   37,  307,   30,   38,   30,   29,
       28,   29,   38,   43,  271,   31,   27,   32,   29,   30,
       27,   31,   36,   30,   32,   33,   31,   37,   30,   38,
       30,   29,   35,   29,   38,   43,   35,   31,   39,   32,
       40,   41,   44,   31,   41,   45,   42,   76,   31,   39,

       42,   68,   68,   42,   35,   64,  270,   64,   35,   82,
      107,   39,   42,   40,   41,   44,  147,   41,   45,   42,
       76,   39,   99,   42,   99,  146,   42,   66,   66,   66,
      145,  143,   82,  107,   42,   69,   69,   95,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   94,   69,   69,   69,   69,   71,  112,   73,   74,
       71,   75,   78,   74,   93,   73,   78,   91,   75,   69,
       71,   73,   71,   69,  109,   74,   73,  110,  111,   71,
      112,   73,   74,   71,   75,   78,   74,   73,   90,   78,
       75,   69,   71,   73,   71,   69,  109,   74,   73,  110,

      111,   69,   69,   70,   70,   88,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,  118,
       70,   70,   70,   70,   80,   72,   79,   77,   70,   72,
       79,   81,   81,   67,   80,   72,   77,   72,   62,   80,
       77,   83,  118,   81,   83,   61,   55,   80,   72,   79,
       77,   70,   72,   79,   81,   81,   80,   72,   77,   72,
       85,   80,   77,   87,   83,   81,   87,   83,   84,   70,
       70,   85,   84,   86,  119,   84,   97,   86,   98,  113,
      114,  115,  116,   85,   84,   97,   87,   98,   52,   87,
      117,   84,  120,   85,  121,   84,   86,  119,   84,  122,

       86,  113,  114,  115,  116,  124,   84,  125,   97,  125,
       98,  126,  117,  127,  120,  128,  121,  123,  123,  129,
      131,  122,  133,  132,  134,   51,  135,  124,  136,  125,
      132,  125,  137,  126,  138,  127,  139,  128,  140,  123,
      123,  149,  129,  131,  133,  132,  150,  134,  135,  158,
      149,  136,  132,  160,  137,  150,  161,  138,  139,  163,
      151,  140,  151,  159,  159,   50,  163,  162,  164,   49,
      161,  166,  158,  149,  165,  182,  160,   46,  150,  161,
      162,  165,  163,   25,  166,  167,  159,  159,  163,  168,
      162,  164,  161,  170,  166,  170,  169,  165,  182,  168,

      167,  171,  162,  165,  172,  171,  166,  173,  167,  169,
       20,  172,  168,  174,  188,   19,  170,  173,  170,  169,
       13,  168,  167,  174,  171,  176,    9,  172,  171,  175,
      173,  169,  177,  172,  176,  178,  174,  188,  177,  173,
      177,  198,  175,  175,  180,  174,    8,  179,  176,  178,
        7,  180,  175,  181,  181,  177,  176,  183,  178,  183,
      177,  179,  177,  198,  175,  175,  186,  180,  185,  186,
      179,  178,  184,  180,    5,  187,  181,  181,  185,  184,
      183,  189,  183,  179,  192,    0,  184,  190,  190,  186,
      191,  185,  186,  187,  196,  184,  189,  191,  187,  199,

      185,  184,  200,  196,  189,  201,  202,  192,  184,  203,
      190,  190,  195,  191,  195,  187,  204,  195,  189,  191,
      205,  199,  206,  207,  200,  208,  196,  209,  201,  202,
      210,  203,  211,  212,  213,    0,  214,  215,  216,  204,
      217,  221,  205,  218,  213,  206,  207,  208,  219,  209,
      220,  222,  210,  224,  225,  211,  212,  213,  214,  226,
      215,  216,  227,  217,  221,  218,  213,  228,  229,  234,
      219,  230,  220,  235,  222,  224,  225,  231,  234,    0,
      231,  226,  238,  233,  227,  233,  236,  240,  233,  238,
      228,  229,  237,  230,  239,  244,  235,    0,  239,  231,

      241,  234,  231,  236,  242,  238,  237,  242,  243,  236,
      240,  238,  245,    0,  241,  237,  245,  239,  244,  243,
      246,  239,    0,  241,  247,  236,  248,  242,  237,  250,
      242,  243,    0,  246,  248,  245,  241,  247,  251,  245,
      253,  243,  249,  246,  256,  249,  254,  247,  251,  248,
      254,  252,  250,  256,  259,  246,  248,  257,  255,  247,
      255,  251,  260,  253,  257,  249,  252,  256,  249,  254,
      251,  258,  261,  254,  252,  256,  262,  259,  264,  266,
      257,  255,  263,  255,  258,  260,  257,  265,  252,  263,
      272,    0,  264,  262,  258,  261,  265,  268,  274,  262,

      267,  264,  266,  275,  267,  263,  258,  269,    0,  276,
      265,  263,  268,  272,  264,  262,  269,  277,  265,  269,
      268,  274,  278,  267,  281,  275,  282,  267,  283,  287,
      269,  276,  286,  289,  268,  291,  292,  295,  269,  293,
      277,  269,  296,  297,  278,  299,  281,  303,  282,  304,
      306,  283,  287,  309,  286,  289,  310,  291,  311,  292,
      295,  293,  311,  312,  296,  316,  297,  314,  299,  303,
      313,  314,  304,  306,  317,  315,  309,  312,  318,  310,
      320,  311,  315,    0,  313,  311,  312,  321,  316,  318,
      314,  319,  322,  313,  314,  323,  325,  317,  315,  312,

      324,  318,  324,  320,  315,  319,  313,  323,  327,  326,
      321,  318,  328,  330,  319,  322,  326,  329,  323,  325,
      329,  331,  332,  324,  333,  324,  328,  319,  330,  323,
      335,  327,  326,  336,  337,  328,  330,  334,  326,  334,
      329,  345,  333,  329,  331,  332,  338,  333,  328,  339,
      330,  340,  341,  335,  342,  343,  336,  337,  344,  346,
      334,  347,  334,  345,  333,  340,  348,  349,  350,  338,
      351,  353,  339,  354,  340,  341,  355,  342,  343,  358,
      359,  344,  346,  360,  347,  361,  363,  340,  348,  364,
      349,  350,  351,  353,  366,  368,  354,  369,  355,  367,

      371,  358,  359,  370,  372,  360,  373,  361,  374,  363,
      375,  364,  370,  367,  376,  378,  379,  366,  368,  373,
      369,  377,  367,  371,  375,  380,  370,  372,  377,  373,
      384,  374,  380,  375,  370,  367,  382,  376,  378,  379,
      385,  373,  381,  383,  377,  386,  375,  382,  380,  387,
      377,  388,  389,  384,  380,  397,  381,  383,  386,  382,
      392,    0,  399,  385,  406,  381,  383,  405,  386,  382,
      407,  408,  387,  388,  410,  389,  405,  397,  381,  383,
      386,  411,  412,  392,  399,  413,  409,  406,  409,  414,
      405,  415,  416,  407,  408,  417,  418,  410,  405,  416,

      424,  414,  419,  420,  411,  412,  421,  427,  413,  409,
      428,  409,  414,  429,  415,  416,  430,  431,  417,  418,
      433,  416,  424,  414,    0,  419,  420,  429,    0,  421,
      427,    0,    0,  428,    0,    0,  429,    0,    0,  430,
      431,    0,    0,  433,    0,    0,    0,    0,    0,  429,
      435,    0,    0,  435,  436,    0,  436,  436,  438,    0,
      438,  438,  439,    0,  439,  439,  440,    0,  440,  440,
      441,    0,  441,  441,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,

      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434,  434,  434,  434,  434,  434,  434,  434,
      434,  434,  434
    } ;

static const flex_int16_t yy_rule_linenum[78] =
    {   0,
       35,   36,   37,   39,   40,   42,   43,   44,   45,   46,
       47,   48,   49,   50,   51,   52,   53,   54,   55,   56,
       57,   58,   59,   60,   61,   62,   63,   64,   65,   66,
       67,   68,   70,   71,   73,   74,   75,   76,   77,   78,
       79,   80,   82,   83,   84,   85,   86,   88,   89,   90,
       91,   92,   93,   94,   95,   97,   99,  100,  101,  102,
      103,  105,  106,  107,  108,  109,  111,  112,  113,  114,
      115,  118,  122,  126,  130,  134,  138
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_sql.lpp"
#line 9 "flex_sql.lpp"
    #include "flex_sql.hpp"
    #include "bison_sql.hpp"
    #include "location.hh"

    #define YY_USER_ACTION loc.columns(yyleng);

    #define yyterminate() return yy::BisonParser::make_END_FILE(loc);

#line 918 "flex_sql.cpp"

#line 920 "flex_sql.cpp"

#define INITIAL 0
#define COMMENT 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin.rdbuf(std::cin.rdbuf());
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout.rdbuf(std::cout.rdbuf());
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
/* %% [7.0] user's declarations go here */
#line 29 "flex_sql.lpp"



#line 33 "flex_sql.lpp"
    loc.step();

#line 1120 "flex_sql.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 435 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1175 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 78 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 78 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 79 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 35 "flex_sql.lpp"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 36 "flex_sql.lpp"
;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 37 "flex_sql.lpp"
BEGIN(INITIAL);
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 39 "flex_sql.lpp"
{ loc.step(); }
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 40 "flex_sql.lpp"
{ loc.lines(yyleng); loc.step(); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 42 "flex_sql.lpp"
return yy::BisonParser::make_CREATE(std::string(yytext), loc);
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 43 "flex_sql.lpp"
return yy::BisonParser::make_DROP(std::string(yytext), loc);
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 44 "flex_sql.lpp"
return yy::BisonParser::make_SHOW(std::string(yytext), loc);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 45 "flex_sql.lpp"
return yy::BisonParser::make_TABLE(std::string(yytext), loc);
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 46 "flex_sql.lpp"
return yy::BisonParser::make_NULL_(std::string(yytext), loc);
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 47 "flex_sql.lpp"
return yy::BisonParser::make_SELECT(std::string(yytext), loc);
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 48 "flex_sql.lpp"
return yy::BisonParser::make_UPDATE(std::string(yytext), loc);
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 49 "flex_sql.lpp"
return yy::BisonParser::make_SET(std::string(yytext), loc);
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 50 "flex_sql.lpp"
return yy::BisonParser::make_WHERE(std::string(yytext), loc);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 51 "flex_sql.lpp"
return yy::BisonParser::make_LIMIT(std::string(yytext), loc);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 52 "flex_sql.lpp"
return yy::BisonParser::make_OFFSET(std::string(yytext), loc);
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 53 "flex_sql.lpp"
return yy::BisonParser::make_VALUES(std::string(yytext), loc);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 54 "flex_sql.lpp"
return yy::BisonParser::make_INTO(std::string(yytext), loc);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 55 "flex_sql.lpp"
return yy::BisonParser::make_INSERT(std::string(yytext), loc);
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 56 "flex_sql.lpp"
return yy::BisonParser::make_FROM(std::string(yytext), loc);
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 57 "flex_sql.lpp"
return yy::BisonParser::make_CAST(std::string(yytext), loc);
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 58 "flex_sql.lpp"
return yy::BisonParser::make_AS(std::string(yytext), loc);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 59 "flex_sql.lpp"
return yy::BisonParser::make_ESCAPE(std::string(yytext), loc);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 60 "flex_sql.lpp"
return yy::BisonParser::make_ISNULL(std::string(yytext), loc);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 61 "flex_sql.lpp"
return yy::BisonParser::make_NOTNULL(std::string(yytext), loc);
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 62 "flex_sql.lpp"
return yy::BisonParser::make_BETWEEN(std::string(yytext), loc);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 63 "flex_sql.lpp"
return yy::BisonParser::make_DISTINCT(std::string(yytext), loc);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 64 "flex_sql.lpp"
return yy::BisonParser::make_EXISTS(std::string(yytext), loc);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 65 "flex_sql.lpp"
return yy::BisonParser::make_WHEN(std::string(yytext), loc);
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 66 "flex_sql.lpp"
return yy::BisonParser::make_THEN(std::string(yytext), loc);
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 67 "flex_sql.lpp"
return yy::BisonParser::make_ELSE(std::string(yytext), loc);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 68 "flex_sql.lpp"
return yy::BisonParser::make_DELETE(std::string(yytext), loc);
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 70 "flex_sql.lpp"
return yy::BisonParser::make_NOT(std::string(yytext), loc);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 71 "flex_sql.lpp"
return yy::BisonParser::make_COLLATE(std::string(yytext), loc);
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 73 "flex_sql.lpp"
return yy::BisonParser::make_IS(std::string(yytext), loc);
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 74 "flex_sql.lpp"
return yy::BisonParser::make_IN(std::string(yytext), loc);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 75 "flex_sql.lpp"
return yy::BisonParser::make_LIKE(std::string(yytext), loc);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 76 "flex_sql.lpp"
return yy::BisonParser::make_GLOB(std::string(yytext), loc);
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 77 "flex_sql.lpp"
return yy::BisonParser::make_MATCH(std::string(yytext), loc);
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 78 "flex_sql.lpp"
return yy::BisonParser::make_REGEXP(std::string(yytext), loc);
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 79 "flex_sql.lpp"
return yy::BisonParser::make_AND(std::string(yytext), loc);
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 80 "flex_sql.lpp"
return yy::BisonParser::make_OR(std::string(yytext), loc);
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 82 "flex_sql.lpp"
return yy::BisonParser::make_DOUBLE(std::string(yytext), loc); 
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 83 "flex_sql.lpp"
return yy::BisonParser::make_TEXT(std::string(yytext), loc);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 84 "flex_sql.lpp"
return yy::BisonParser::make_INTEGER(std::string(yytext), loc);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 85 "flex_sql.lpp"
return yy::BisonParser::make_TRUE(std::string(yytext), loc);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 86 "flex_sql.lpp"
return yy::BisonParser::make_FALSE(std::string(yytext), loc); 
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 88 "flex_sql.lpp"
return yy::BisonParser::make_EQUAL(std::string(yytext), loc);
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 89 "flex_sql.lpp"
return yy::BisonParser::make_NOTEQUAL(std::string(yytext), loc);
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 90 "flex_sql.lpp"
return yy::BisonParser::make_NOTEQUAL(std::string(yytext), loc);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 91 "flex_sql.lpp"
return yy::BisonParser::make_LESSEQUAL(std::string(yytext), loc);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 92 "flex_sql.lpp"
return yy::BisonParser::make_GREATERQUALL(std::string(yytext), loc);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 93 "flex_sql.lpp"
return yy::BisonParser::make_LESS(std::string(yytext), loc);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 94 "flex_sql.lpp"
return yy::BisonParser::make_GREATER(std::string(yytext), loc);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 95 "flex_sql.lpp"
return yy::BisonParser::make_EQUAL(std::string(yytext), loc);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 97 "flex_sql.lpp"
return yy::BisonParser::make_CONCATENATION(std::string(yytext), loc);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 99 "flex_sql.lpp"
return yy::BisonParser::make_BINNOT(std::string(yytext), loc);
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 100 "flex_sql.lpp"
return yy::BisonParser::make_BINAND(std::string(yytext), loc);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 101 "flex_sql.lpp"
return yy::BisonParser::make_BINOR(std::string(yytext), loc);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 102 "flex_sql.lpp"
return yy::BisonParser::make_LEFTSHIFT(std::string(yytext), loc);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 103 "flex_sql.lpp"
return yy::BisonParser::make_RIGHTSHIFT(std::string(yytext), loc);
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 105 "flex_sql.lpp"
return yy::BisonParser::make_PLUS(std::string(yytext), loc);
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 106 "flex_sql.lpp"
return yy::BisonParser::make_MINUS(std::string(yytext), loc);
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 107 "flex_sql.lpp"
return yy::BisonParser::make_MULTIPLY(std::string(yytext), loc);
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 108 "flex_sql.lpp"
return yy::BisonParser::make_DIVISION(std::string(yytext), loc);
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 109 "flex_sql.lpp"
return yy::BisonParser::make_MOD(std::string(yytext), loc);
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 111 "flex_sql.lpp"
return yy::BisonParser::make_SEMICOLON(std::string(yytext), loc);
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 112 "flex_sql.lpp"
return yy::BisonParser::make_DOT(std::string(yytext), loc);
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 113 "flex_sql.lpp"
return yy::BisonParser::make_COMMA(std::string(yytext), loc);
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 114 "flex_sql.lpp"
return yy::BisonParser::make_OPENBRACKET(std::string(yytext), loc);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 115 "flex_sql.lpp"
return yy::BisonParser::make_CLOSEBRACKET(std::string(yytext), loc);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 118 "flex_sql.lpp"
{
    return yy::BisonParser::make_INTEGER_CONST(std::string(yytext), loc);
}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 122 "flex_sql.lpp"
{
    return yy::BisonParser::make_DOUBLE_CONST(std::string(yytext), loc);
}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 126 "flex_sql.lpp"
{
    return yy::BisonParser::make_IDENTIFIER(std::string(yytext + 1, yyleng - 2), loc);
}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 130 "flex_sql.lpp"
{
    return yy::BisonParser::make_IDENTIFIER(std::string(yytext), loc);
}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 134 "flex_sql.lpp"
{
    return yy::BisonParser::make_STRING(std::string(yytext + 1, yyleng - 2), loc);
}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 138 "flex_sql.lpp"
{ 
    throw std::logic_error("[SQL-Lexer-Error] Unknown Character: " +  yytext[0]);
}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 142 "flex_sql.lpp"
ECHO;
	YY_BREAK
#line 1603 "flex_sql.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */
/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 435 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 435 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 434);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, char* yy_bp)
/* %endif */
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream& input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/* %if-c++-only */
/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
/* %endif */
/* %if-c++-only */
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
/* %endif */
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/* %if-c++-only */
/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_input_file = file.rdbuf();
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int _new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 142 "flex_sql.lpp"


int yyerror(const char *msg) {
    throw "[SQL-Lexer-Error] " + std::string(msg);
}
